AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWSServerlessTask

  Serverless API which reads and writes to a DynamoDB table.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 6

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: nikolov2_records
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      TimeToLiveSpecification:
        AttributeName: expiration_time
        Enabled: true
      Tags:
        - Key: Owner
          Value: nikolov2

  ArchivingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nikolov2-serverless-task-archiving-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      Tags:
        - Key: Owner
          Value: nikolov2

  DynamoOperationsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: dynamo_operations/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ReadRecord:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /records
            Method: get
            RequestParameters:
              - method.request.querystring.id:
                  Required: true
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable
      Policies:
        - AmazonDynamoDBFullAccess
      Tags:
        Owner: nikolov2

  DynamoArchiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamo_archive/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ObjectArchive:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref ArchivingBucket
      Policies:
        - CloudWatchLogsFullAccess
        - AmazonS3FullAccess
      Tags:
        Owner: nikolov2

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DynamoOperationsApi:
    Description: "API Gateway endpoint URL for Prod stage for DynamoDB operations function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/records/"
  DynamoOperationsFunction:
    Description: "DynamoDB Operations Lambda Function ARN"
    Value: !GetAtt DynamoOperationsFunction.Arn
  DynamoOperationsFunctionIamRole:
    Description: "Implicit IAM Role created for DynamoDB operations function"
    Value: !GetAtt DynamoOperationsFunctionRole.Arn
  DynamoArchiveFunction:
    Description: "DynamoDB archive Lambda Function ARN"
    Value: !GetAtt DynamoArchiveFunction.Arn
  DynamoArchiveFunctionIamRole:
    Description: "Implicit IAM Role created for DynamoDB archive function"
    Value: !GetAtt DynamoArchiveFunctionRole.Arn
  DynamoTable:
    Description: "DynamoDB table where records are stored"
    Value: !GetAtt DynamoTable.Arn
  ArchivingBucket:
    Description: "S3 bucket used for archiving expired records"
    Value: !GetAtt ArchivingBucket.Arn
